
[MLJBase.StaticTransformer]
":input_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJBase"
":package_license" = "MIT"
":load_path" = "MLJBase.StaticTransformer"
":package_uuid" = "unknown"
":package_url" = "unknown"
":is_wrapper" = "`false`"
":supports_online" = "`false`"
":docstring" = "Applies a given data transformation\n`f` (either a function or callable).\n→ based on [MLJBase](unknown).\n→ do `@load StaticTransformer pkg=\"MLJBase\"` to use the model.\n→ do `?StaticTransformer` for documentation."
":name" = "StaticTransformer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":fitted_params", ":transform"]
":hyperparameters" = "`(:f,)`"
":hyperparameter_types" = "`(\"Any\",)`"
":hyperparameter_ranges" = "`(nothing,)`"

[MLJBase.Resampler]
":input_scitype" = "`ScientificTypes.Unknown`"
":target_scitype" = "`ScientificTypes.Unknown`"
":is_pure_julia" = "`true`"
":package_name" = "MLJBase"
":package_license" = "unknown"
":load_path" = "MLJBase.Resampler"
":package_uuid" = "unknown"
":package_url" = "unknown"
":is_wrapper" = "`true`"
":supports_weights" = "`false`"
":supports_online" = "`false`"
":docstring" = "Resampler from MLJBase.jl.\n[Documentation](unknown)."
":name" = "Resampler"
":is_supervised" = "`true`"
":prediction_type" = ":unknown"
":implemented_methods" = [":clean!", ":evaluate", ":fit"]
":hyperparameters" = "`(:model, :resampling, :measure, :weights, :operation, :acceleration, :check_measure, :repeats)`"
":hyperparameter_types" = "`(\"MLJModelInterface.Supervised\", \"Any\", \"Any\", \"Union{Nothing, AbstractArray{_s317,1} where _s317<:Real}\", \"Any\", \"ComputationalResources.AbstractResource\", \"Bool\", \"Int64\")`"
":hyperparameter_ranges" = "`(nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing)`"

[MLJModels.ConstantClassifier]
":input_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":target_scitype" = "`AbstractArray{_s67,1} where _s67<:ScientificTypes.Finite`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.ConstantClassifier"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`true`"
":supports_online" = "`false`"
":docstring" = "Constant classifier (Probabilistic).\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load ConstantClassifier pkg=\"MLJModels\"` to use the model.\n→ do `?ConstantClassifier` for documentation."
":name" = "ConstantClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":fit", ":fitted_params", ":predict"]
":hyperparameters" = "``"
":hyperparameter_types" = "``"
":hyperparameter_ranges" = "``"

[MLJModels.Standardizer]
":input_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.Standardizer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_online" = "`false`"
":docstring" = "Standardize (whiten) data.\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load Standardizer pkg=\"MLJModels\"` to use the model.\n→ do `?Standardizer` for documentation."
":name" = "Standardizer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":fitted_params", ":transform"]
":hyperparameters" = "`(:features,)`"
":hyperparameter_types" = "`(\"Array{Symbol,1}\",)`"
":hyperparameter_ranges" = "`(nothing,)`"

[MLJModels.DeterministicConstantClassifier]
":input_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":target_scitype" = "`AbstractArray{_s67,1} where _s67<:ScientificTypes.Finite`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.DeterministicConstantClassifier"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":supports_online" = "`false`"
":docstring" = "Constant classifier (Deterministic).\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load DeterministicConstantClassifier pkg=\"MLJModels\"` to use the model.\n→ do `?DeterministicConstantClassifier` for documentation."
":name" = "DeterministicConstantClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict"]
":hyperparameters" = "``"
":hyperparameter_types" = "``"
":hyperparameter_ranges" = "``"

[MLJModels.OneHotEncoder]
":input_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.OneHotEncoder"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_online" = "`false`"
":docstring" = "One-Hot-Encoding of the categorical data.\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load OneHotEncoder pkg=\"MLJModels\"` to use the model.\n→ do `?OneHotEncoder` for documentation."
":name" = "OneHotEncoder"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":transform"]
":hyperparameters" = "`(:features, :drop_last, :ordered_factor)`"
":hyperparameter_types" = "`(\"Array{Symbol,1}\", \"Bool\", \"Bool\")`"
":hyperparameter_ranges" = "`(nothing, nothing, nothing)`"

[MLJModels.UnivariateBoxCoxTransformer]
":input_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":output_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.UnivariateBoxCoxTransformer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_online" = "`false`"
":docstring" = "Box-Cox transformation of univariate data.\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load UnivariateBoxCoxTransformer pkg=\"MLJModels\"` to use the model.\n→ do `?UnivariateBoxCoxTransformer` for documentation."
":name" = "UnivariateBoxCoxTransformer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":fitted_params", ":inverse_transform", ":inverse_transform", ":transform"]
":hyperparameters" = "`(:n, :shift)`"
":hyperparameter_types" = "`(\"Int64\", \"Bool\")`"
":hyperparameter_ranges" = "`(nothing, nothing)`"

[MLJModels.ConstantRegressor]
":input_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.ConstantRegressor"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":supports_online" = "`false`"
":docstring" = "Constant regressor (Probabilistic).\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load ConstantRegressor pkg=\"MLJModels\"` to use the model.\n→ do `?ConstantRegressor` for documentation."
":name" = "ConstantRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":fitted_params", ":predict"]
":hyperparameters" = "`(:distribution_type,)`"
":hyperparameter_types" = "`(\"Type{D} where D\",)`"
":hyperparameter_ranges" = "`(nothing,)`"

[MLJModels.FeatureSelector]
":input_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.FeatureSelector"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_online" = "`false`"
":docstring" = "Filter features (columns) of a table by name.\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load FeatureSelector pkg=\"MLJModels\"` to use the model.\n→ do `?FeatureSelector` for documentation."
":name" = "FeatureSelector"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":fitted_params", ":transform"]
":hyperparameters" = "`(:features,)`"
":hyperparameter_types" = "`(\"Array{Symbol,1}\",)`"
":hyperparameter_ranges" = "`(nothing,)`"

[MLJModels.UnivariateDiscretizer]
":input_scitype" = "`AbstractArray{_s127,1} where _s127<:ScientificTypes.Continuous`"
":output_scitype" = "`AbstractArray{_s126,1} where _s126<:ScientificTypes.OrderedFactor`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.UnivariateDiscretizer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_online" = "`false`"
":docstring" = "Discretize continuous variables via quantiles.\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load UnivariateDiscretizer pkg=\"MLJModels\"` to use the model.\n→ do `?UnivariateDiscretizer` for documentation."
":name" = "UnivariateDiscretizer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":inverse_transform", ":inverse_transform", ":inverse_transform", ":inverse_transform", ":transform", ":transform"]
":hyperparameters" = "`(:n_classes,)`"
":hyperparameter_types" = "`(\"Int64\",)`"
":hyperparameter_ranges" = "`(nothing,)`"

[MLJModels.FillImputer]
":input_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.FillImputer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_online" = "`false`"
":docstring" = "Imputes missing data with a fixed value computed on the non-missing values. A different imputing function can be specified for `Continuous`, `Count` and `Finite` data. \n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load FillImputer pkg=\"MLJModels\"` to use the model.\n→ do `?FillImputer` for documentation."
":name" = "FillImputer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":transform"]
":hyperparameters" = "`(:features, :continuous_fill, :count_fill, :finite_fill)`"
":hyperparameter_types" = "`(\"Array{Symbol,1}\", \"Function\", \"Function\", \"Function\")`"
":hyperparameter_ranges" = "`(nothing, nothing, nothing, nothing)`"

[MLJModels.DeterministicConstantRegressor]
":input_scitype" = "`ScientificTypes.Table{_s23} where _s23<:(AbstractArray{_s25,1} where _s25<:Union{Missing, ScientificTypes.Found})`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.DeterministicConstantRegressor"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":supports_online" = "`false`"
":docstring" = "Constant regressor (Deterministic).\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load DeterministicConstantRegressor pkg=\"MLJModels\"` to use the model.\n→ do `?DeterministicConstantRegressor` for documentation."
":name" = "DeterministicConstantRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict"]
":hyperparameters" = "``"
":hyperparameter_types" = "``"
":hyperparameter_ranges" = "``"

[MLJModels.UnivariateStandardizer]
":input_scitype" = "`AbstractArray{_s127,1} where _s127<:ScientificTypes.Infinite`"
":output_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.UnivariateStandardizer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_online" = "`false`"
":docstring" = "Standardize (whiten) univariate data.\n→ based on [MLJModels](https://github.com/alan-turing-institute/MLJModels.jl).\n→ do `@load UnivariateStandardizer pkg=\"MLJModels\"` to use the model.\n→ do `?UnivariateStandardizer` for documentation."
":name" = "UnivariateStandardizer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":inverse_transform", ":inverse_transform", ":transform", ":transform"]
":hyperparameters" = "``"
":hyperparameter_types" = "``"
":hyperparameter_ranges" = "``"
